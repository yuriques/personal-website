/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

// Interactable models can't be primitive
import * as THREE from "three";

import { useRef, useState, useEffect, useLayoutEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { a } from "@react-spring/three";
import islandScene from "../assets/3d/island.glb";

export function Island({ ...props }) {
  const stagePositions = {
    0: { x: 0, y: 10, z: 40 },
    1: { x: -23, y: 3, z: 20 },
    2: { x: -3, y: 12, z: 10 },
    3: { x: 18, y: 4, z: 35 },
  };
  const islandRef = useRef();
  const { nodes, materials } = useGLTF(islandScene);

  const ghostMesh = useRef();

  useFrame((state) => {
    state.camera.position.lerp(
      {
        ...stagePositions[props.currentStage],
        z: stagePositions[props.currentStage].z + 5,
      },
      0.03
    );

    ghostMesh.current.position.lerp(
      {
        ...stagePositions[props.currentStage],
        z: stagePositions[props.currentStage].z - 5,
      },
      0.03
    );
    // ghostMesh.current.updateMatrix();
    state.camera.lookAt(
      ghostMesh.current.position.x,
      ghostMesh.current.position.y,
      ghostMesh.current.position.z
    );
    // state.camera.updateProjectionMatrix();
  });

  const zoomToView = (stage) => {
    props.setCurrentStage(stage);
  };

  return (
    <a.group ref={islandRef}>
      {Object.keys(stagePositions).map((stage) => (
        <Moment
          key={stage}
          data={{
            color: "#bbbbbb",
            position: Object.values(stagePositions[stage]),
          }}
          zoomToView={() => zoomToView(stage)}
        />
      ))}

      <mesh ref={ghostMesh}>
        <primitive object={new THREE.BoxGeometry(1, 1, 1)} />
        <meshStandardMaterial wireframe color="red" />
      </mesh>
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
}

//https://codesandbox.io/s/three-fiber-zoom-to-object-ghost-solution-z6xw1?file=/src/App.js:366-1307
function Moment({ data, zoomToView }) {
  const meshRef = useRef();

  const [hover, setHover] = useState(false);
  const [clicked, setClicked] = useState(false);

  useEffect(() => {
    document.body.style.cursor = hover ? "pointer" : "default";
  }, [hover]);

  useLayoutEffect(() => {
    meshRef.current.position.x = data.position[0];
    meshRef.current.position.y = data.position[1];
    meshRef.current.position.z = data.position[2];
  });

  return (
    <mesh
      ref={meshRef}
      onPointerOver={() => {
        setHover(true);
      }}
      onPointerOut={() => {
        setHover(false);
      }}
      onClick={() => {
        setClicked(!clicked);
        zoomToView(meshRef);
      }}
    >
      <primitive object={new THREE.BoxGeometry(1, 1, 1)} />
      <meshStandardMaterial wireframe color="grey" />
    </mesh>
  );
}

export default Island;
